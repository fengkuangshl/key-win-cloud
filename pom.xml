<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.key.win</groupId>
    <artifactId>key-win-cloud</artifactId>
    <version>2.0.1</version>
    <packaging>pom</packaging>
    <modules>
        <!-- 内部支撑工具 -->
        <module>inner-intergration</module>
        <!-- 注册中心 -->
        <module>register-center</module>
        <!-- 认证中心 -->
        <module>oauth-center</module>
        <!-- 业务网关 -->
        <module>api-gateway</module>
        <!-- 业务中心 -->
        <module>business-center</module>
        <!-- 任务中心 -->
        <module>job-center</module>
        <!-- 灰度发布中心 <module>gray-center</module> -->
        <!-- 调优中心 <module>tuning-center</module> -->
        <!-- 监控中心 -->
        <module>monitor-center</module>
        <!-- spring cloud gateway -->
        <module>new-api-gateway</module>
        <!-- web页面门户 -->
        <module>web-portal</module>
        <!-- template-center -->
        <module>template-center</module>
    </modules>


    <!-- ~ ~ Copyright (c) 2018-2025, key-win-cloud All rights reserved.
        ~ ~ Redistribution and use in source and binary forms, with or without ~
        modification, are permitted provided that the following conditions are met:
        ~ ~ Redistributions of source code must retain the above copyright notice,
        ~ this list of conditions and the following disclaimer. ~ Redistributions
        in binary form must reproduce the above copyright ~ notice, this list of
        conditions and the following disclaimer in the ~ documentation and/or other
        materials provided with the distribution. ~ Neither the name of the key-win-cloud
        developer nor the names of its ~ contributors may be used to endorse or promote
        products derived from ~ this software without specific prior written permission.
        ~ Author: owen gitgeek (624191343@qq.com) ~ -->

    <properties>
        <jmh.version>1.23</jmh.version>
        <java.version>11</java.version>
        <core.version>2.0.1</core.version>
        <log4j2.version>2.1</log4j2.version>
        <jasypt.version>1.14</jasypt.version>
        <hutool.version>5.1.0</hutool.version>
        <fastjson.version>1.2.70</fastjson.version>
        <disruptor.version>3.4.1</disruptor.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <spring-boot.version>2.3.12.RELEASE</spring-boot.version>
        <spring-platform.version>Cairo-SR3</spring-platform.version>
        <spring.social.version>1.1.6.RELEASE</spring.social.version>
        <spring-security.version>5.1.1.RELEASE</spring-security.version>
        <security-oauth2.version>2.3.6.RELEASE</security-oauth2.version>
        <commons-collections4.version>4.1</commons-collections4.version>
        <commons-lang3.version>3.9</commons-lang3.version>
        <hibernate-validator.verion>5.4.2.Final</hibernate-validator.verion>
        <flowable.version>6.4.1</flowable.version>
        <jaxb.version>2.2.11</jaxb.version>
        <spring-cloud-dependencies.version>Hoxton.SR12</spring-cloud-dependencies.version>
        <spring-cloud-alibaba-dependencies.version>2.2.8.RELEASE</spring-cloud-alibaba-dependencies.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <docker.image.prefix>key-win</docker.image.prefix>
        <!-- docker私有仓库地址 -->
        <docker.registry.url>192.168.1.50:8083</docker.registry.url>
        <docker.registry.host>http://192.168.1.50:2375</docker.registry.host>
        <ant.version>1.10.7</ant.version>
    </properties>


    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${commons-collections4.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Micrometer Prometheus registry -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <!-- 测试框架 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${jaxb.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-core</artifactId>
            <version>${jaxb.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
            <version>${jaxb.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!--        <dependency>-->
        <!--            <groupId>org.apache.ant</groupId>-->
        <!--            <artifactId>ant-jsch</artifactId>-->
        <!--            <version>1.9.5</version>-->
        <!--        </dependency>-->

        <!--        &lt;!&ndash; https://mvnrepository.com/artifact/org.apache.ant/ant &ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>org.apache.ant</groupId>-->
        <!--            <artifactId>ant</artifactId>-->
        <!--            <version>1.9.5</version>-->
        <!--        </dependency>-->

        <!--        &lt;!&ndash; https://mvnrepository.com/artifact/ant-contrib/ant-contrib &ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>ant-contrib</groupId>-->
        <!--            <artifactId>ant-contrib</artifactId>-->
        <!--            <version>1.0b3</version>-->
        <!--        </dependency>-->
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.spring.platform</groupId>
                <artifactId>platform-bom</artifactId>
                <version>${spring-platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.security.oauth</groupId>
                <artifactId>spring-security-oauth2</artifactId>
                <version>${security-oauth2.version}</version>
            </dependency>

            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-core</artifactId>
                <version>${jmh.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-generator-annprocess</artifactId>
                <version>${jmh.version}</version>
            </dependency>
            <!--基础模块 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>basic-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!--数据日志-->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>data-log-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!-- 公共实体类模块 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>common-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- 关系型和非关系型数据库配置 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>db-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- 非关系型数据库配置 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>redis-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- 日志配置 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>log-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!-- 资源服务 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>uaa-client-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!-- 资源服务 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>uaa-server-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- API测试文档 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>swagger-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- 自定义路由策略 -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>ribbon-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!-- 熔断限流组件  -->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>sentinel-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!-- rsa-spring-boot-starter组件-->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>rsa-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- mybatis-plus组件-->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>mybatis-plus-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <!--websocket组件-->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>websocket-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
            <!-- jpa组件-->
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>jpa-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>

            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>jpa-feign-template-common</artifactId>
                <version>${core.version}</version>
            </dependency>

            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>mybaties-feign-template-common</artifactId>
                <version>${core.version}</version>
            </dependency>

            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>jpa-feign-template-api</artifactId>
                <version>${core.version}</version>
            </dependency>

            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>mybaties-feign-template-api</artifactId>
                <version>${core.version}</version>
            </dependency>
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>mybaties-rpc-template-service-api</artifactId>
                <version>${core.version}</version>
            </dependency>
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>jpa-rpc-template-service-api</artifactId>
                <version>${core.version}</version>
            </dependency>
            <dependency>
                <groupId>com.key.win</groupId>
                <artifactId>mybaties-data-log-spring-boot-starter</artifactId>
                <version>${core.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
                <!--192.168.1.27:30153-->
                <spring.cloud.nacos.config.server-addr>127.0.0.1:8848</spring.cloud.nacos.config.server-addr>
                <spring.cloud.nacos.config.file-extension>yaml</spring.cloud.nacos.config.file-extension>
                <spring.cloud.nacos.config.namespace>key-win-dev</spring.cloud.nacos.config.namespace>
                <spring.cloud.nacos.config.shared-configs.data-id>common-dev.yaml
                </spring.cloud.nacos.config.shared-configs.data-id>
                <spring.cloud.nacos.config.shared-configs.refresh>true
                </spring.cloud.nacos.config.shared-configs.refresh>
                <spring.cloud.nacos.config.group>DEV_GROUP</spring.cloud.nacos.config.group>
            </properties>
            <activation>
                <!-- 默认情况下使用dev开发配置 如 打包时不包含 -p 参数-->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>dev-1</id>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
                <!--192.168.1.27:30153-->
                <spring.cloud.nacos.config.server-addr>192.168.1.27:30153</spring.cloud.nacos.config.server-addr>
                <spring.cloud.nacos.config.file-extension>yaml</spring.cloud.nacos.config.file-extension>
                <spring.cloud.nacos.config.namespace>key-win-dev-k8s</spring.cloud.nacos.config.namespace>
                <spring.cloud.nacos.config.shared-configs.data-id>common-dev.yaml
                </spring.cloud.nacos.config.shared-configs.data-id>
                <spring.cloud.nacos.config.shared-configs.refresh>true
                </spring.cloud.nacos.config.shared-configs.refresh>
                <spring.cloud.nacos.config.group>DEV_GROUP</spring.cloud.nacos.config.group>
            </properties>
            <activation>
                <!-- 默认情况下使用dev开发配置 如 打包时不包含 -p 参数-->
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
        <!-- 打包命令package -P test -->
        <profile>
            <id>uat</id>
            <properties>
                <spring.profiles.active>uat</spring.profiles.active>
                <spring.cloud.nacos.config.server-addr>192.168.1.96:80</spring.cloud.nacos.config.server-addr>
                <spring.cloud.nacos.config.file-extension>yaml</spring.cloud.nacos.config.file-extension>
                <spring.cloud.nacos.config.namespace>key-win-uat</spring.cloud.nacos.config.namespace>
                <spring.cloud.nacos.config.shared-configs.data-id>common-uat.yaml
                </spring.cloud.nacos.config.shared-configs.data-id>
                <spring.cloud.nacos.config.shared-configs.refresh>true
                </spring.cloud.nacos.config.shared-configs.refresh>
                <spring.cloud.nacos.config.group>UAT_GROUP</spring.cloud.nacos.config.group>
            </properties>
        </profile>
        <!-- 打包命令package -P prod -->
        <profile>
            <id>prod</id>
            <properties>
                <spring.cloud.nacos.config.server-addr>192.168.1.96:80</spring.cloud.nacos.config.server-addr>
                <spring.profiles.active>prod</spring.profiles.active>
                <spring.cloud.nacos.config.file-extension>yaml</spring.cloud.nacos.config.file-extension>
                <spring.cloud.nacos.config.namespace>key-win-prod</spring.cloud.nacos.config.namespace>
                <spring.cloud.nacos.config.shared-configs.data-id>common-prod.yaml
                </spring.cloud.nacos.config.shared-configs.data-id>
                <spring.cloud.nacos.config.shared-configs.refresh>true
                </spring.cloud.nacos.config.shared-configs.refresh>
                <spring.cloud.nacos.config.group>PROD_GROUP</spring.cloud.nacos.config.group>
            </properties>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>2.5.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <target>${java.version}</target>
                        <source>${java.version}</source>
                        <encoding>UTF-8</encoding>
                        <compilerArgs>
                            <arg>-parameters</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.2.0</version>
                    <configuration>
                        <archive>
                            <addMavenDescriptor>false</addMavenDescriptor>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.2.2</version>
                    <configuration>
                        <serverId>docker-hub</serverId>   <!--mvn setting.xml配置的那个id-->
                        <imageName>${docker.registry.url}/${docker.image.prefix}/${project.artifactId}</imageName>
                        <!-- 镜像tag-->
                        <imageTags>
                            <imageTag>latest</imageTag>
                        </imageTags>
                        <!--覆盖相同标签镜像-->
                        <forceTags>true</forceTags>
                        <dockerDirectory>src/main/docker</dockerDirectory>
                        <!-- docker远程服务器地址 -->
                        <dockerHost>${docker.registry.host}</dockerHost>
                        <!-- 上传镜像-->
                        <!--                        <pushImage>true</pushImage>-->
                        <pushImageTag>true</pushImageTag>
                        <!-- 重试次数-->
                        <retryPushCount>3</retryPushCount>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                                <include>jdk-8u261-linux-x64.rpm</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                    <include>**/*.tld</include>
                    <include>**/*.p12</include>
                    <include>**/*.conf</include>
                    <include>**/*.txt</include>
                    <include>**/*.wsdl</include>
                    <include>**/*.xsd</include>
                    <include>**/*.ftl</include>
                    <include>**/*.lua</include>
                    <include>**/*.json</include>
                    <include>processes/*</include>
                    <include>**/spring.factories</include>
                    <include>META-INF/services/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.tld</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/view</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/activiti</directory>
                <includes>
                    <include>**/bpmnjs/dist/**</include>
                    <include>**/bpmn/**</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
    </build>

    <repositories>
        <repository>
            <id>aliyun-repos</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <!--    <distributionManagement>-->
    <!--        <repository>-->
    <!--            &lt;!&ndash;id的名字可以任意取，但是在setting文件中的属性<server>的ID与这里一致&ndash;&gt;-->
    <!--            <id>docker-hub</id>-->
    <!--            &lt;!&ndash;指向仓库类型为host(宿主仓库）的储存类型为Release的仓库&ndash;&gt;-->
    <!--            <url>http://192.168.1.50:8081/repository/maven-releases/</url>-->
    <!--        </repository>-->
    <!--        <snapshotRepository>-->
    <!--            <id>docker-hub</id>-->
    <!--            &lt;!&ndash;指向仓库类型为host(宿主仓库）的储存类型为Snapshot的仓库&ndash;&gt;-->
    <!--            <url>http://192.168.1.50:8081/repository/maven-snapshots/</url>-->
    <!--        </snapshotRepository>-->
    <!--    </distributionManagement>-->

</project>